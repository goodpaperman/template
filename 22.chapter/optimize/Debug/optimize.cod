; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.50727.762 

	TITLE	e:\codes\20.vandevoorde.cpp templates\22.chapter\optimize\optimize.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_0P@GHFPNOJB@bad?5allocation?$AA@		; `string'
_DATA	SEGMENT
__bad_alloc_Message DD FLAT:??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
_DATA	ENDS
;	COMDAT ??_C@_0P@GHFPNOJB@bad?5allocation?$AA@
CONST	SEGMENT
??_C@_0P@GHFPNOJB@bad?5allocation?$AA@ DB 'bad allocation', 00H ; `string'
CONST	ENDS
PUBLIC	?f3@@YAHXZ					; f3
PUBLIC	?f2@@YAHABH@Z					; f2
PUBLIC	?f1@@YAHABH@Z					; f1
PUBLIC	?foo@@YAHXZ					; foo
EXTRN	__RTC_CheckEsp:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	__RTC_InitBase:PROC
;	COMDAT rtc$TMZ
; File e:\codes\20.vandevoorde.cpp templates\22.chapter\optimize\optimize.cpp
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
; Function compile flags: /Odtp /RTCsu /ZI
rtc$IMZ	ENDS
;	COMDAT ?foo@@YAHXZ
_TEXT	SEGMENT
_answer$ = -20						; size = 4
_param$ = -8						; size = 4
?foo@@YAHXZ PROC					; foo, COMDAT

; 23   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 24   :   int param = 0, answer = 0; 

  0001e	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _param$[ebp], 0
  00025	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _answer$[ebp], 0

; 25   :   answer = f1(param); 

  0002c	8d 45 f8	 lea	 eax, DWORD PTR _param$[ebp]
  0002f	50		 push	 eax
  00030	e8 00 00 00 00	 call	 ?f1@@YAHABH@Z		; f1
  00035	83 c4 04	 add	 esp, 4
  00038	89 45 ec	 mov	 DWORD PTR _answer$[ebp], eax

; 26   :   f2(param); 

  0003b	8d 45 f8	 lea	 eax, DWORD PTR _param$[ebp]
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?f2@@YAHABH@Z		; f2
  00044	83 c4 04	 add	 esp, 4

; 27   :   f3(); 

  00047	e8 00 00 00 00	 call	 ?f3@@YAHXZ		; f3

; 28   :   return answer + param; 

  0004c	8b 45 ec	 mov	 eax, DWORD PTR _answer$[ebp]
  0004f	03 45 f8	 add	 eax, DWORD PTR _param$[ebp]

; 29   : }

  00052	52		 push	 edx
  00053	8b cd		 mov	 ecx, ebp
  00055	50		 push	 eax
  00056	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@foo
  0005c	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00061	58		 pop	 eax
  00062	5a		 pop	 edx
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006c	3b ec		 cmp	 ebp, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
  00077	90		 npad	 1
$LN5@foo:
  00078	01 00 00 00	 DD	 1
  0007c	00 00 00 00	 DD	 $LN4@foo
$LN4@foo:
  00080	f8 ff ff ff	 DD	 -8			; fffffff8H
  00084	04 00 00 00	 DD	 4
  00088	00 00 00 00	 DD	 $LN3@foo
$LN3@foo:
  0008c	70		 DB	 112			; 00000070H
  0008d	61		 DB	 97			; 00000061H
  0008e	72		 DB	 114			; 00000072H
  0008f	61		 DB	 97			; 00000061H
  00090	6d		 DB	 109			; 0000006dH
  00091	00		 DB	 0
?foo@@YAHXZ ENDP					; foo
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?f1@@YAHABH@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
?f1@@YAHABH@Z PROC					; f1, COMDAT

; 8    : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 9    :   return ++ (int&)r; 

  0001e	8b 45 08	 mov	 eax, DWORD PTR _r$[ebp]
  00021	8b 08		 mov	 ecx, DWORD PTR [eax]
  00023	83 c1 01	 add	 ecx, 1
  00026	8b 55 08	 mov	 edx, DWORD PTR _r$[ebp]
  00029	89 0a		 mov	 DWORD PTR [edx], ecx
  0002b	8b 45 08	 mov	 eax, DWORD PTR _r$[ebp]
  0002e	8b 00		 mov	 eax, DWORD PTR [eax]

; 10   : }

  00030	5f		 pop	 edi
  00031	5e		 pop	 esi
  00032	5b		 pop	 ebx
  00033	8b e5		 mov	 esp, ebp
  00035	5d		 pop	 ebp
  00036	c3		 ret	 0
?f1@@YAHABH@Z ENDP					; f1
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?f2@@YAHABH@Z
_TEXT	SEGMENT
_r$ = 8							; size = 4
?f2@@YAHABH@Z PROC					; f2, COMDAT

; 13   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 14   :   return r; 

  0001e	8b 45 08	 mov	 eax, DWORD PTR _r$[ebp]
  00021	8b 00		 mov	 eax, DWORD PTR [eax]

; 15   : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?f2@@YAHABH@Z ENDP					; f2
; Function compile flags: /Odtp /RTCsu /ZI
_TEXT	ENDS
;	COMDAT ?f3@@YAHXZ
_TEXT	SEGMENT
?f3@@YAHXZ PROC						; f3, COMDAT

; 18   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 19   :   return 42; 

  0001e	b8 2a 00 00 00	 mov	 eax, 42			; 0000002aH

; 20   : }

  00023	5f		 pop	 edi
  00024	5e		 pop	 esi
  00025	5b		 pop	 ebx
  00026	8b e5		 mov	 esp, ebp
  00028	5d		 pop	 ebp
  00029	c3		 ret	 0
?f3@@YAHXZ ENDP						; f3
_TEXT	ENDS
PUBLIC	??_C@_0P@MJENHCCM@goo?$CI?$CJ?5called?4?6?$AA@	; `string'
PUBLIC	?goo@@YAXXZ					; goo
EXTRN	__imp__printf:PROC
;	COMDAT ??_C@_0P@MJENHCCM@goo?$CI?$CJ?5called?4?6?$AA@
CONST	SEGMENT
??_C@_0P@MJENHCCM@goo?$CI?$CJ?5called?4?6?$AA@ DB 'goo() called.', 0aH, 00H ; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?goo@@YAXXZ
_TEXT	SEGMENT
?goo@@YAXXZ PROC					; goo, COMDAT

; 32   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 33   :   printf("goo() called.\n"); 

  0001e	8b f4		 mov	 esi, esp
  00020	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MJENHCCM@goo?$CI?$CJ?5called?4?6?$AA@
  00025	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  0002b	83 c4 04	 add	 esp, 4
  0002e	3b f4		 cmp	 esi, esp
  00030	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 34   : }

  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?goo@@YAXXZ ENDP					; goo
_TEXT	ENDS
PUBLIC	?g@MyType@@QAEXXZ				; MyType::g
PUBLIC	??_C@_0P@IPNFAADF@rg2?5type?3?5?$CFs?4?6?$AA@	; `string'
PUBLIC	??_C@_0O@NBNDMHEL@rg?5type?3?5?$CFs?4?6?$AA@	; `string'
PUBLIC	??_C@_0P@CHFDLBKE@pg2?5type?3?5?$CFs?4?6?$AA@	; `string'
PUBLIC	??_C@_0O@DALNADOG@pg?5type?3?5?$CFs?4?6?$AA@	; `string'
PUBLIC	??_R0P6AXXZ@8					; void (__cdecl*)(void) `RTTI Type Descriptor'
PUBLIC	??_C@_0BA@ECBJLAPO@GooT?5type?3?5?$CFs?4?6?$AA@	; `string'
PUBLIC	??_C@_0P@IFMPGIMI@goo?5type?3?5?$CFs?4?6?$AA@	; `string'
PUBLIC	??_R0$$A6AXXZ@8					; void __cdecl(void) `RTTI Type Descriptor'
PUBLIC	??_C@_0N@PHJILKBH@foo?$CI?$CJ?5?$DN?5?$CFd?4?6?$AA@ ; `string'
PUBLIC	_wmain
EXTRN	__imp_?name@type_info@@QBEPBDPAU__type_info_node@@@Z:PROC
EXTRN	?__type_info_root_node@@3U__type_info_node@@A:QWORD ; __type_info_root_node
EXTRN	??_7type_info@@6B@:QWORD			; type_info::`vftable'
;	COMDAT ??_C@_0P@IPNFAADF@rg2?5type?3?5?$CFs?4?6?$AA@
CONST	SEGMENT
??_C@_0P@IPNFAADF@rg2?5type?3?5?$CFs?4?6?$AA@ DB 'rg2 type: %s.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NBNDMHEL@rg?5type?3?5?$CFs?4?6?$AA@
CONST	SEGMENT
??_C@_0O@NBNDMHEL@rg?5type?3?5?$CFs?4?6?$AA@ DB 'rg type: %s.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CHFDLBKE@pg2?5type?3?5?$CFs?4?6?$AA@
CONST	SEGMENT
??_C@_0P@CHFDLBKE@pg2?5type?3?5?$CFs?4?6?$AA@ DB 'pg2 type: %s.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DALNADOG@pg?5type?3?5?$CFs?4?6?$AA@
CONST	SEGMENT
??_C@_0O@DALNADOG@pg?5type?3?5?$CFs?4?6?$AA@ DB 'pg type: %s.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_R0P6AXXZ@8
_DATA	SEGMENT
??_R0P6AXXZ@8 DD FLAT:??_7type_info@@6B@		; void (__cdecl*)(void) `RTTI Type Descriptor'
	DD	00H
	DB	'.P6AXXZ', 00H
_DATA	ENDS
;	COMDAT ??_C@_0BA@ECBJLAPO@GooT?5type?3?5?$CFs?4?6?$AA@
CONST	SEGMENT
??_C@_0BA@ECBJLAPO@GooT?5type?3?5?$CFs?4?6?$AA@ DB 'GooT type: %s.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IFMPGIMI@goo?5type?3?5?$CFs?4?6?$AA@
CONST	SEGMENT
??_C@_0P@IFMPGIMI@goo?5type?3?5?$CFs?4?6?$AA@ DB 'goo type: %s.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_R0$$A6AXXZ@8
_DATA	SEGMENT
??_R0$$A6AXXZ@8 DD FLAT:??_7type_info@@6B@		; void __cdecl(void) `RTTI Type Descriptor'
	DD	00H
	DB	'.$$A6AXXZ', 00H
_DATA	ENDS
;	COMDAT ??_C@_0N@PHJILKBH@foo?$CI?$CJ?5?$DN?5?$CFd?4?6?$AA@
CONST	SEGMENT
??_C@_0N@PHJILKBH@foo?$CI?$CJ?5?$DN?5?$CFd?4?6?$AA@ DB 'foo() = %d.', 0aH
	DB	00H						; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT _wmain
_TEXT	SEGMENT
_mt$ = -65						; size = 1
_mfr$ = -56						; size = 4
_rg2$ = -44						; size = 4
_rg$ = -32						; size = 4
_pg2$ = -20						; size = 4
_pg$ = -8						; size = 4
_argc$ = 8						; size = 4
_argv$ = 12						; size = 4
_wmain	PROC						; COMDAT

; 45   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00012	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd

; 46   :   printf("foo() = %d.\n", foo()); 

  0001e	e8 00 00 00 00	 call	 ?foo@@YAHXZ		; foo
  00023	8b f4		 mov	 esi, esp
  00025	50		 push	 eax
  00026	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PHJILKBH@foo?$CI?$CJ?5?$DN?5?$CFd?4?6?$AA@
  0002b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  00031	83 c4 08	 add	 esp, 8
  00034	3b f4		 cmp	 esi, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 47   : 
; 48   :   goo(); 

  0003b	e8 00 00 00 00	 call	 ?goo@@YAXXZ		; goo

; 49   :   printf("goo type: %s.\n", typeid(goo).name()); 

  00040	8b f4		 mov	 esi, esp
  00042	68 00 00 00 00	 push	 OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
  00047	b9 00 00 00 00	 mov	 ecx, OFFSET ??_R0$$A6AXXZ@8
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?name@type_info@@QBEPBDPAU__type_info_node@@@Z
  00052	3b f4		 cmp	 esi, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b f4		 mov	 esi, esp
  0005b	50		 push	 eax
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IFMPGIMI@goo?5type?3?5?$CFs?4?6?$AA@
  00061	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  00067	83 c4 08	 add	 esp, 8
  0006a	3b f4		 cmp	 esi, esp
  0006c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 50   :   printf("GooT type: %s.\n", typeid(GooT).name()); 

  00071	8b f4		 mov	 esi, esp
  00073	68 00 00 00 00	 push	 OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
  00078	b9 00 00 00 00	 mov	 ecx, OFFSET ??_R0$$A6AXXZ@8
  0007d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?name@type_info@@QBEPBDPAU__type_info_node@@@Z
  00083	3b f4		 cmp	 esi, esp
  00085	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008a	8b f4		 mov	 esi, esp
  0008c	50		 push	 eax
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@ECBJLAPO@GooT?5type?3?5?$CFs?4?6?$AA@
  00092	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  00098	83 c4 08	 add	 esp, 8
  0009b	3b f4		 cmp	 esi, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 51   : 
; 52   :   GooT* pg = goo; 

  000a2	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _pg$[ebp], OFFSET ?goo@@YAXXZ ; goo

; 53   :   pg(); 

  000a9	8b f4		 mov	 esi, esp
  000ab	ff 55 f8	 call	 DWORD PTR _pg$[ebp]
  000ae	3b f4		 cmp	 esi, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 54   :   (*pg)(); 

  000b5	8b f4		 mov	 esi, esp
  000b7	ff 55 f8	 call	 DWORD PTR _pg$[ebp]
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 55   : 
; 56   :   printf("pg type: %s.\n", typeid(pg).name()); 

  000c1	8b f4		 mov	 esi, esp
  000c3	68 00 00 00 00	 push	 OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
  000c8	b9 00 00 00 00	 mov	 ecx, OFFSET ??_R0P6AXXZ@8
  000cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?name@type_info@@QBEPBDPAU__type_info_node@@@Z
  000d3	3b f4		 cmp	 esi, esp
  000d5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000da	8b f4		 mov	 esi, esp
  000dc	50		 push	 eax
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DALNADOG@pg?5type?3?5?$CFs?4?6?$AA@
  000e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  000e8	83 c4 08	 add	 esp, 8
  000eb	3b f4		 cmp	 esi, esp
  000ed	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 57   : 
; 58   :   void (*pg2)() = &goo; 

  000f2	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _pg2$[ebp], OFFSET ?goo@@YAXXZ ; goo

; 59   :   pg2(); 

  000f9	8b f4		 mov	 esi, esp
  000fb	ff 55 ec	 call	 DWORD PTR _pg2$[ebp]
  000fe	3b f4		 cmp	 esi, esp
  00100	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 60   : 
; 61   :   printf("pg2 type: %s.\n", typeid(pg2).name()); 

  00105	8b f4		 mov	 esi, esp
  00107	68 00 00 00 00	 push	 OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
  0010c	b9 00 00 00 00	 mov	 ecx, OFFSET ??_R0P6AXXZ@8
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?name@type_info@@QBEPBDPAU__type_info_node@@@Z
  00117	3b f4		 cmp	 esi, esp
  00119	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0011e	8b f4		 mov	 esi, esp
  00120	50		 push	 eax
  00121	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CHFDLBKE@pg2?5type?3?5?$CFs?4?6?$AA@
  00126	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  0012c	83 c4 08	 add	 esp, 8
  0012f	3b f4		 cmp	 esi, esp
  00131	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 62   : 
; 63   :   GooT& rg = goo; 

  00136	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _rg$[ebp], OFFSET ?goo@@YAXXZ ; goo

; 64   :   rg(); 

  0013d	8b f4		 mov	 esi, esp
  0013f	ff 55 e0	 call	 DWORD PTR _rg$[ebp]
  00142	3b f4		 cmp	 esi, esp
  00144	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 65   : 
; 66   :   printf("rg type: %s.\n", typeid(rg).name()); 

  00149	8b f4		 mov	 esi, esp
  0014b	68 00 00 00 00	 push	 OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
  00150	b9 00 00 00 00	 mov	 ecx, OFFSET ??_R0$$A6AXXZ@8
  00155	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?name@type_info@@QBEPBDPAU__type_info_node@@@Z
  0015b	3b f4		 cmp	 esi, esp
  0015d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00162	8b f4		 mov	 esi, esp
  00164	50		 push	 eax
  00165	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NBNDMHEL@rg?5type?3?5?$CFs?4?6?$AA@
  0016a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  00170	83 c4 08	 add	 esp, 8
  00173	3b f4		 cmp	 esi, esp
  00175	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 67   : 
; 68   :   void (&rg2)() = goo; 

  0017a	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _rg2$[ebp], OFFSET ?goo@@YAXXZ ; goo

; 69   :   rg2(); 

  00181	8b f4		 mov	 esi, esp
  00183	ff 55 d4	 call	 DWORD PTR _rg2$[ebp]
  00186	3b f4		 cmp	 esi, esp
  00188	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 70   : 
; 71   :   printf("rg2 type: %s.\n", typeid(rg2).name()); 

  0018d	8b f4		 mov	 esi, esp
  0018f	68 00 00 00 00	 push	 OFFSET ?__type_info_root_node@@3U__type_info_node@@A ; __type_info_root_node
  00194	b9 00 00 00 00	 mov	 ecx, OFFSET ??_R0$$A6AXXZ@8
  00199	ff 15 00 00 00
	00		 call	 DWORD PTR __imp_?name@type_info@@QBEPBDPAU__type_info_node@@@Z
  0019f	3b f4		 cmp	 esi, esp
  001a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001a6	8b f4		 mov	 esi, esp
  001a8	50		 push	 eax
  001a9	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IPNFAADF@rg2?5type?3?5?$CFs?4?6?$AA@
  001ae	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  001b4	83 c4 08	 add	 esp, 8
  001b7	3b f4		 cmp	 esi, esp
  001b9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 72   : 
; 73   :   void (MyType::*mfr)() = &MyType::g; 

  001be	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _mfr$[ebp], OFFSET ?g@MyType@@QAEXXZ ; MyType::g

; 74   :   MyType mt; 
; 75   :   (mt.*mfr)(); 

  001c5	8b f4		 mov	 esi, esp
  001c7	8d 4d bf	 lea	 ecx, DWORD PTR _mt$[ebp]
  001ca	ff 55 c8	 call	 DWORD PTR _mfr$[ebp]
  001cd	3b f4		 cmp	 esi, esp
  001cf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 76   : 
; 77   :   //void (MyType::&mfr)() = MyType::g; 
; 78   : 	return 0;

  001d4	33 c0		 xor	 eax, eax

; 79   : }

  001d6	52		 push	 edx
  001d7	8b cd		 mov	 ecx, ebp
  001d9	50		 push	 eax
  001da	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@wmain
  001e0	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001e5	58		 pop	 eax
  001e6	5a		 pop	 edx
  001e7	5f		 pop	 edi
  001e8	5e		 pop	 esi
  001e9	5b		 pop	 ebx
  001ea	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  001f0	3b ec		 cmp	 ebp, esp
  001f2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f7	8b e5		 mov	 esp, ebp
  001f9	5d		 pop	 ebp
  001fa	c3		 ret	 0
  001fb	90		 npad	 1
$LN5@wmain:
  001fc	01 00 00 00	 DD	 1
  00200	00 00 00 00	 DD	 $LN4@wmain
$LN4@wmain:
  00204	bf ff ff ff	 DD	 -65			; ffffffbfH
  00208	01 00 00 00	 DD	 1
  0020c	00 00 00 00	 DD	 $LN3@wmain
$LN3@wmain:
  00210	6d		 DB	 109			; 0000006dH
  00211	74		 DB	 116			; 00000074H
  00212	00		 DB	 0
_wmain	ENDP
_TEXT	ENDS
PUBLIC	??_C@_0BF@BOANOJAK@MyType?3?3g?$CI?$CJ?5called?4?6?$AA@ ; `string'
;	COMDAT ??_C@_0BF@BOANOJAK@MyType?3?3g?$CI?$CJ?5called?4?6?$AA@
CONST	SEGMENT
??_C@_0BF@BOANOJAK@MyType?3?3g?$CI?$CJ?5called?4?6?$AA@ DB 'MyType::g() c'
	DB	'alled.', 0aH, 00H				; `string'
; Function compile flags: /Odtp /RTCsu /ZI
CONST	ENDS
;	COMDAT ?g@MyType@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?g@MyType@@QAEXXZ PROC					; MyType::g, COMDAT
; _this$ = ecx

; 39   :   void g() { printf("MyType::g() called.\n"); } 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b f4		 mov	 esi, esp
  00025	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BOANOJAK@MyType?3?3g?$CI?$CJ?5called?4?6?$AA@
  0002a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__printf
  00030	83 c4 04	 add	 esp, 4
  00033	3b f4		 cmp	 esi, esp
  00035	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003a	5f		 pop	 edi
  0003b	5e		 pop	 esi
  0003c	5b		 pop	 ebx
  0003d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00043	3b ec		 cmp	 ebp, esp
  00045	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004a	8b e5		 mov	 esp, ebp
  0004c	5d		 pop	 ebp
  0004d	c3		 ret	 0
?g@MyType@@QAEXXZ ENDP					; MyType::g
_TEXT	ENDS
END
